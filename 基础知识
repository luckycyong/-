Python基础：

1、Python垃圾回收机制
	Python里的每一个东西都是对象，它们的核心就是一个结构体：PyObject。这个结构体是每个对象的必有内容，其中ob_refcnt就是作为引用计数。
当一个对象有新的引用时，引用计数（ob_refcnt）增加，当引用它的对象被删除时，引用计数就会减少，当引用计数为0时，就说明该对象的生命结束了。

2、copy与deepcopy的区别
	浅拷贝是对于一个对象的顶层拷贝：目标对象改变，我们的拷贝对象不会发生变化（我们默认使用的都是浅拷贝）
	深拷贝是对一个对象所有层次的拷贝：目标对象改变，可能会使拷贝对象发生改变

3、如何优化程序来规避Python(cpython)中GIL全局锁的局限性
	GIL：全局解释器锁。每个线程在执行的过层中都需要先获取GIL，保证同一时刻只有一个线程执行代码。
	线程释放GIL锁的情况：在IO操作等可能会引起阻塞system call之前，可以暂时释放GIL，但在执行完毕后，必须重新获取GIL。
	Python使用多进程来利用多核CPU资源。
	多线程爬虫比单线程性能更好，因为IO阻塞会自动释放GIL锁。

4、Python与C语言代码底层是如何操作的，简单描述下这两者的优缺点。
	Python为解释器语言，高度集成，执行速度慢，Python虚拟机可跨平台，一般用于软件快速开发。
	C语言为编译型语言，执行速度快，不能跨平台，需程序员自己进行内存管理，一般用于操作系统、驱动等底层开发。

5、进程、线程、协程
	进程：进程是操作系统进行资源分配和调度的一个独立单位，具有动态性（进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的）、并发性、独立性、结构性（程序、数据和进程控制块组成）。
	线程：线程是程序执行种一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。时间片轮转，同一时间节点只有一个线程在执行。
	协程：是一种基于线程之上，但又比线程更加轻量级的存在，由程序员自己写程序来管理的轻量级线程。一个线程可以拥有多个协程。
	进程与线程的差异：进程由于拥有自己独立的地址空间，它们的通信方式通常有管道（pipe）、消息队列（message queue）、信号量（semophore）。
而同一进程的多个线程因共享同一内存空间，可以直接共享数据。但是为了防止资源抢占，需要增加锁机制（互斥锁、读写锁、读写锁）。
	协程与线程的差异：线程占用资源高，频繁创建销毁会带来严重的性能问题。而协程资源占用小，初始单位可随需要而增大，不会带来严重的性能问题。
线程的数据同步需要用锁等机制确保数据的一致性和可见性。而协程不需要多线程的锁机制，因为只有一个线程，不存在写变量冲突，在协程种控制共享资源不枷锁，只需要判断状态就好了，所以协程的执行效率比多线程高很多。

6、设计模式
	设计模式的六大原则
		开闭原则：对扩展开放，对修改关闭
		里氏替换原则：里氏替换原则是面向对象设计的基本原则之一
		依赖倒转原则：针对接口编程，依赖抽象而不依赖具体。
		接口隔离原则：降低类之间的耦合度，使用多个隔离的接口，要比使用单个接口好。
		狄米特法则，又称最少知道原则：一个实体应当尽量少的与其它实体之间发生相互作用，使能系统功能模块相对独立。
		合成复用原则：尽量使用合成/聚合的方式，而不是使用继承
	

测试：
1、简单说一下黑盒测试与白盒测试
	黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。
	白盒测试：已知产品的内部工作过程，可以通过测试证明每种内部操作是否符合设计规格要求，所有内部成分是否以经过检查。
2、unittest与selenium
	pass

运维：
1、Nginx
	Nginx常用的负载均衡算法有：轮询（默认）、权重、IP Hash、fair（根据后端服务器响应时间分配）、URL Hash
	
2、RabbitMQ
	核心：解耦（多系统多进程的数据交换，用pub/sub）、异步（把大数据量的同步处理改为异步）、削峰
	高可用性：
		单机模式：不存在高可用
		普通集群模式：不存在高可用，每个集群服务器上都启一个RabbitMQ实例，但是创建的queue只会放在一个实例上。
		镜像集群模式：高可用策略
	如何解决消息队列延时以及过期问题：针对这个问题可以有事前、事中、事后三种处理。
		事前：增加预警程序，监控最大可堆积消息数，超过阈值就发预警信息（比如短信、邮件）
		事中：快速分析事故原因（比如消费端是否故障，紧急重启）
		事后：对消费端紧急扩容；增加消费者进程；删除过期消息，重新生产消息
	如何保证不丢数据：需要考虑3个可能丢数据的地方：生产端、队列本身、消费端
		生产端：开启事务（不推荐，太耗性能降低吞吐）。
				开启confirm模式，每次写的消息都会分配一个唯一的ID。
		队列本身：开启RabbitMQ持久化（1、创建queue时设置为持久化；2、将消息设置为持久化，把deliveryMode设置为2）。
		消费端：关闭RabbitMQ的自动ACK。
	集群节点类型：分为磁盘节点和内存节点，单节点系统必须为磁盘节点，否则重启RabbitMQ重启后信息会丢失。
	
数据结构与算法
1、常用的数据结构有哪些，并简单说下其应用场景
	链表、集合、树、图

2、AES算法/RAS算法
	AES（对称加密算法）：
		加密过程：字节代换（S盒）-->行位移-->列混合操作-->轮密钥加。
	RAS（非对称加密算法）：
		欧拉定理：当n为质数，a的Φ(n)次方减去1，可以被n整除。
		模反元素：如果两个正整数a与n互质，则一定存在整数b，使能ab-1一定能被n整除。
		步骤：
			（1）随机排选两个大质数 p和q
			（2）计算p和q两个质数乘积N（N=p*q）的欧拉函数r（r=Φ(n)=Φ(p)Φ(q)=(p-1)(q-1)）
			（3）随机选择和r互质的数字e，通常选择e=65537
			（4）最后已欧拉定理为基础得到e关于r的模反元素
		
Web：
	1、URL生命周期
		客户端发起请求-->WSGI创建socket服务端，接受请求-->中间件处理请求-->url路由，根据请求的url找到视图函数-->view视图，进行业务处理-->中间件处理响应-->WSGI返回响应-->浏览器渲染
		
	2、FBV和CBV
		FBV：视图里使用函数处理请求。（用户发送url请求，Django会依次遍历路由映射表中的所有记录，一旦路由映射表其中的一条匹配成功了，就执行视图函数中对应的函数名）
		CBV：视图里使用类处理请求。（服务端通过路由映射表匹配成功后会自动去找dispatch方法，然后Django会通过dispatch反射的方式找到类中对应的方法并执行；
类中的方法执行完毕之后，会把客户端想要的数据返回给dispatch方法，由dispatch方法把数据返回经客户端。）
	
	3、跨域问题
		跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。
		解决方案：
			JSONP：ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。
			代理：通过代理模式，绕过浏览器端。A网站需要B网站数据，可以给A网站增加一个后端接口来获取B网站数据，A网站通过调用这个接口获取数据，从而实现跨域。
			Django三方库：Django-core-header
	4、JWT（JSON Web Token）
		是基于token的鉴权机制
		流程：
			用户使用用户名密码来请求服务器
			服务器进行验证用户的信息
			服务器通过验证发送给用户一个token
			客户端存储token，并在每次请求时附送上这个token值
			服务端验证token值，并返回数据
		组成：头部（header）、载荷（payload）、签证（signature）
			header：声明类型、加密算法
			payload：存放有效信息
			signature：加密后的header、payload、secret（secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，
所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了）。
		优点
			因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。
			因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。
			便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。
			它不需要在服务端保存会话信息, 所以它易于应用的扩展
			
数据库：
	1、关系型数据库MySQL、PostgreSQL
		支持事务（ACID）、优化执行、并发控制、共享锁/排它锁
		优化方法：缩小查询范围（select 字段 代替 select *；between and 代替 in；inner join > left join > join；精确查找 代替 模糊查询）、建立索引
		数据库设计三范式：属性的原子性（列不可再分）；字段的唯一性（字段之间不存在部分依赖）；记录的冗余性（字段之间不存在推导关系）
		
	2、MySQL两大存储引擎
		InnoDB：支持事务，并发控制，但占用资源
		MyISAM：读写速度快，查询高效，资源占用少，但不支持事务
		
	3、存储函数和过程
		存储过程和函数，是用来实现一组关于表操作的SQL语句、可重复地执行操作数据库的集合。
		优点：
			存储过程和函数允许标准组件式编程，提高了SQL语句的重用性、共享性和可移植性。
			存储过程和函数可以被作为一种安全机制来利用。
			存储过程和函数能够实现较快的执行速度，能够减少网络流量。
		缺点：
			存储过程和函数的编写比单句SQL语句复杂。
			在编写存储过程和函数时，需要创建这些数据库对象的权限。
	4、事务隔离级别
		Read uncommitted、Read committed、Repeatable read、Serializable
	
