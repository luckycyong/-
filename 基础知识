Python基础：

1、Python垃圾回收机制
	Python里的每一个东西都是对象，它们的核心就是一个结构体：PyObject。这个结构体是每个对象的必有内容，其中ob_refcnt就是作为引用计数。
当一个对象有新的引用时，引用计数（ob_refcnt）增加，当引用它的对象被删除时，引用计数就会减少，当引用计数为0时，就说明该对象的生命结束了。

2、copy与deepcopy的区别
	浅拷贝是对于一个对象的顶层拷贝：目标对象改变，我们的拷贝对象不会发生变化（我们默认使用的都是浅拷贝）
	深拷贝是对一个对象所有层次的拷贝：目标对象改变，可能会使拷贝对象发生改变

3、如何优化程序来规避Python(cpython)中GIL全局锁的局限性
	GIL：全局解释器锁。每个线程在执行的过层中都需要先获取GIL，保证同一时刻只有一个线程执行代码。
	线程释放GIL锁的情况：在IO操作等可能会引起阻塞system call之前，可以暂时释放GIL，但在执行完毕后，必须重新获取GIL。
	Python使用多进程来利用多核CPU资源。
	多线程爬虫比单线程性能更好，因为IO阻塞会自动释放GIL锁。

4、Python与C语言代码底层是如何操作的，简单描述下这两者的优缺点。
	Python为解释器语言，高度集成，执行速度慢，Python虚拟机可跨平台，一般用于软件快速开发。
	C语言为编译型语言，执行速度快，不能跨平台，需程序员自己进行内存管理，一般用于操作系统、驱动等底层开发。
	

测试：
1、简单说一下黑盒测试与白盒测试
	黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。
	白盒测试：已知产品的内部工作过程，可以通过测试证明每种内部操作是否符合设计规格要求，所有内部成分是否以经过检查。
2、unittest与selenium
	pass

运维：
1、Nginx
	Nginx常用的负载均衡算法有：轮询（默认）、权重、IP Hash、fair（根据后端服务器响应时间分配）、URL Hash
	Nginx简单的Web部署：
2、RabbitMQ
	核心：解耦（多系统多进程的数据交换，用pub/sub）、异步（把大数据量的同步处理改为异步）、削峰
	高可用性：
		单机模式：不存在高可用
		普通集群模式：不存在高可用，每个集群服务器上都启一个RabbitMQ实例，但是创建的queue只会放在一个实例上。
虽然每个实例都同步了queue元数据，但
		镜像集群模式：高可用策略
	如何解决消息队列延时以及过期问题：针对这个问题可以有事前、事中、事后三种处理。
		事前：增加预警程序，监控最大可堆积消息数，超过阈值就发预警信息（比如短信、邮件）
		事中：快速分析事故原因（比如消费端是否故障，紧急重启）
		事后：对消费端紧急扩容；增加消费者进程；删除过期消息，重新生产消息
	如何保证不丢数据：需要考虑3个可能丢数据的地方：生产端、队列本身、消费端
		生产端：开启事务（不推荐，太耗性能降低吞吐）。
				开启confirm模式，每次写的消息都会分配一个唯一的ID。
		队列本身：开启RabbitMQ持久化（1、创建queue时设置为持久化；2、将消息设置为持久化，把deliveryMode设置为2）。
		消费端：关闭RabbitMQ的自动ACK。
	集群节点类型：分为磁盘节点和内存节点，单节点系统必须为磁盘节点，否则重启RabbitMQ重启后信息会丢失。
	
数据结构与算法
1、常用的数据类型有哪些，并简单说下其应用场景
	
